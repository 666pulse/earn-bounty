// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Bounties {
  id            String          @id @default(uuid())
  title         String
  slug          String          @unique
  description   String?         @db.VarChar(10000)
  skills        String?
  subSkills     String?
  deadline      DateTime
  eligibility   Json?
  status        Bounties_status @default(OPEN)
  isActive      Boolean         @default(true)
  isPublished   Boolean         @default(false)
  isFeatured    Boolean         @default(false)
  token         String
  rewardAmount  Int?
  rewards       Json?
  sponsorId     String
  sponsor       Sponsors        @relation(fields: [sponsorId], references: [id])
  pocId         String
  poc           User            @relation(fields: [pocId], references: [id])
  source        Bounties_source @default(NATIVE)
  sourceDetails Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([id, slug])
  @@index([sponsorId])
  @@index([pocId])
}

model Otp {
  id        String   @id @map("_id")
  email     String
  otp       Int
  timestamp DateTime @default(now())
}

model Sponsors {
  id           String         @id @default(uuid())
  name         String         @unique
  slug         String         @unique
  logo         String?
  url          String?
  industry     String
  twitter      String?
  bio          String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UserSponsors UserSponsors[]
  Bounties     Bounties[]

  @@index([id, slug])
}

model User {
  id               String         @id @default(uuid())
  publicKey        String         @unique
  email            String         @unique
  username         String         @unique
  photo            String?
  firstName        String?
  lastName         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isVerified       Boolean        @default(false)
  role             SuperRole      @default(USER)
  isTalentFilled   Boolean        @default(false)
  skills           String?
  subskills        String?
  interests        String?
  bio              String?
  twitter          String?
  github           String?
  linkedin         String?
  website          String?
  telegram         String?
  community        String?
  experience       String?
  superteamLevel   String?
  location         String?
  cryptoExperience String?
  workPrefernce    String?
  currentEmployer  String?
  pow              String?        @db.VarChar(2000)
  notifications    String?
  private          Boolean        @default(false)
  UserSponsors     UserSponsors[]
  Bounties         Bounties[]

  @@index([email, publicKey, username])
}

model UserSponsors {
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  sponsorId String
  sponsor   Sponsors @relation(fields: [sponsorId], references: [id])
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, sponsorId])
  @@index([userId, sponsorId])
  @@index([sponsorId])
}

enum Role {
  ADMIN
  MEMBER
}

enum SuperRole {
  GOD
  USER
}

enum Bounties_source {
  NATIVE
  IMPORT
}

enum Bounties_status {
  OPEN
  REVIEW
  CLOSED
}
